---
import type { GetStaticPaths } from "astro";
import { getCollection, type z } from "astro:content";

import BlockRenderer from "@/components/astro/BlockRenderer.astro";
import { caseSchema } from "@/content/config";
import Layout from "@/layouts/Layout.astro";

export const getStaticPaths = (async () => {
  const cases = await getCollection("cases", (entry) =>
    entry.id.endsWith(".en"),
  );
  const paths = cases.map((caseEntry) => {
    const { slug } = caseEntry.data;
    return {
      params: {
        caseSlug: slug.replace("/", ""),
      },
      props: {
        caseEntry: caseEntry.data,
      },
    };
  });
  return paths;
}) satisfies GetStaticPaths;

export type CaseEntry = z.infer<typeof caseSchema>;

interface Props {
  caseEntry: CaseEntry;
}

const { caseEntry } = Astro.props;
const { client, blocks } = caseEntry;
---

<Layout title={client}>
  <main>
    <div>
      {
        blocks.map((block, index) => {
          return <BlockRenderer block={block} index={index} />;
        })
      }
    </div>
  </main>
</Layout>
